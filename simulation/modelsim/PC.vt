// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "05/13/2019 19:43:04"
                                                                                
// Verilog Test Bench template for design : PC
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module PC_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clk;
reg en_in;
reg [7:0] offset_addr;
reg [1:0] pc_ctrl;
reg rst;
// wires                                               
wire [15:0]  pc_out;

// assign statements (if any)                          
PC i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.en_in(en_in),
	.offset_addr(offset_addr),
	.pc_ctrl(pc_ctrl),
	.pc_out(pc_out),
	.rst(rst)
);
initial                                                
begin                                                  
	// 初始化clk
	clk=1'b0;
	// 将en_in（高有效）初始化为无效
	en_in = 1'b0;
	// 将rst（低有效）初始化为有效
	rst=1'b0;  
	// 为方便助教检测，统一将offset_addr初始化为8'hff
	offset_addr = 8'hff;
	// 将pc_ctrl初始化为0
	pc_ctrl = 0;
	// 隔10个时间单位后将rst设为无效。思考：这里为什么要先触发一次rst信号呢？
	#10 rst=1'b1;
	// 隔10个时间单位后将en_in设为有效同时修改pc_ctrl的指令，使得每个周期pc_out+1
	#10 en_in = 1; pc_ctrl = 2'b01;
	// 隔40个时间单位后，修改pc_ctrl的值，检验其另一功能
	#40 pc_ctrl = 2'b10;
	// 隔20个时间单位后置rst有效
	#20 rst=1'b0;
	// 隔20个时间单位后停止仿真
	#20 $stop;
                    
end   
                                                 
// 每隔10隔时间单位反转clk，生成时钟信号                                   
always #10 clk=~clk;                                                     

endmodule