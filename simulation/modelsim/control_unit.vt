// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "05/22/2019 14:09:03"
                                                                                
// Verilog Test Bench template for design : control_unit
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module control_unit_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clk;
reg en;
reg en_alu;
reg en_ram_out;
reg [15:0] ins;
reg rst;
// wires                                               
wire [2:0]  alu_func;
wire alu_in_sel;
wire en_pc_pulse;
wire en_ram_in;
wire en_rf_pulse;
wire [7:0]  offset_addr;
wire [1:0]  pc_ctrl;
wire [3:0]  reg_en;

// assign statements (if any)                          
control_unit i1 (
// port map - connection between master ports and signals/registers   
	.alu_func(alu_func),
	.alu_in_sel(alu_in_sel),
	.clk(clk),
	.en(en),
	.en_alu(en_alu),
	.en_pc_pulse(en_pc_pulse),
	.en_ram_in(en_ram_in),
	.en_ram_out(en_ram_out),
	.en_rf_pulse(en_rf_pulse),
	.ins(ins),
	.offset_addr(offset_addr),
	.pc_ctrl(pc_ctrl),
	.reg_en(reg_en),
	.rst(rst)
);
initial                                                
begin                                                  
	clk=0;
   en=0;
   en_alu=0;
   en_ram_out=0;
   rst=1;
   ins=16'h0000;
   #10 
	rst=0;
	#10
	rst=1;
	en=1;
	
	#10
	en_alu=1;
	en_ram_out=1;
	#30
	en_alu=0;
	en_ram_out=0;
	// 准备指令
	#10
	ins=16'b0001_0100_0000_0001;	//Mov R1 R0
	#10
	en_alu=1;	//打开ALU
	en_ram_out=1;	//读取内存
	#30
	en_alu=0;
	en_ram_out=0;
	// 准备指令
	#10
	ins=16'b0010_1000_0000_0011;
	#10
	en_alu=1;
	en_ram_out=1;
	#30
	en_alu=0;
	en_ram_out=0;
	// 准备指令
	#10
	ins=16'b0011_1100_0000_0111;
	#10
	en_alu=1;
	en_ram_out=1;
	#30
	en_alu=0;
	en_ram_out=0;
	// 准备指令
	#10
	ins=16'b0100_1100_0000_1111;
	#10
	en_alu=1;
	en_ram_out=1;
	#30
	en_alu=0;
	en_ram_out=0;
	// 准备指令
	#10
	ins=16'b0111_1100_1111_1111;
	#10
	en_alu=1;
	en_ram_out=1;
	
	#30 $stop;
end                                                    
always #5 clk=~clk;                                                   
endmodule

